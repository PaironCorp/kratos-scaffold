{{- /*gotype: github.com/yoogoc/kratos-scaffold/project_generator.CmdTmpl*/ -}}
package main

import (
	"fmt"
	"{{.AppPkgPath}}/internal/conf"
	ilog "{{.AppPkgPath}}/internal/log"
	"os"

	"github.com/go-kratos/kratos/v2/config"
	"github.com/go-kratos/kratos/v2/config/env"
	"github.com/go-kratos/kratos/v2/config/file"

	"github.com/spf13/cobra"
)

// go build -ldflags "-X main.Version=x.y.z"
var (
	// Name is the name of the compiled software.
	Name = "{{.ServiceName}}"
	// Version is the version of the compiled software.
	Version string

	flagconf string
)

type RootCommand cobra.Command

func main() {
	cmd, _, _ := initApp(ilog.NameString(Name), ilog.VersionString(Version))

	if err := cmd.Execute(); err != nil {
		_, _ = fmt.Fprintln(os.Stderr, err)
		os.Exit(1)
	}
}

func newConf(rootCmd *RootCommand) *conf.Bootstrap {
	flags := (*cobra.Command)(rootCmd).PersistentFlags()
	flags.StringVarP(&flagconf, "config", "c", "./configs", "config path, eg: --config=config.yaml")
	var bc conf.Bootstrap
	_ = flags.Parse(os.Args[1:])

	c := config.New(
		config.WithSource(
			file.NewSource(flagconf),
			env.NewSource("kratos_"),
		),
	)
	if err := c.Load(); err != nil {
		panic(err)
	}
	if err := c.Scan(&bc); err != nil {
		panic(err)
	}
	return &bc
}

func newDataConf(bc *conf.Bootstrap) *conf.Data {
	return bc.Data
}

func newLogConf(bc *conf.Bootstrap) *conf.Log {
	return bc.Log
}

func newServerConf(bc *conf.Bootstrap) *conf.Server {
	return bc.Server
}

func newRootCmd() *RootCommand {
	root := &RootCommand{
		Short:              "assign service",
		Long:               "assign service",
		FParseErrWhitelist: cobra.FParseErrWhitelist{UnknownFlags: true},
		Run: func(cmd *cobra.Command, args []string) {
			_ = cmd.Help()
		},
	}

	return root
}

{{- if .IsBff }}
func newCmd(root *RootCommand, server *ServerCommand) *cobra.Command {
{{- else }}
func newCmd(root *RootCommand, server *ServerCommand, migrate *MigrateCommand) *cobra.Command {
{{- end }}
	(*cobra.Command)(root).AddCommand(
		(*cobra.Command)(server),
		(*cobra.Command)(migrate),
	)
	return (*cobra.Command)(root)
}
