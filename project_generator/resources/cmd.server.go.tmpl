{{- /*gotype: github.com/yoogoc/kratos-scaffold/project_generator.CmdTmpl*/ -}}
package main

import (
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
	"github.com/go-kratos/kratos/v2/transport/grpc"
	"github.com/go-kratos/kratos/v2/transport/http"
	"github.com/google/wire"
	"github.com/spf13/cobra"
)

type ServerCommand cobra.Command

{{- if .IsBff }}
var ProviderSet = wire.NewSet(NewServerCmd)
{{- else }}
var ProviderSet = wire.NewSet(NewServerCmd, NewMigrateCmd)
{{- end }}

func NewServerCmd(logger log.Logger, gs *grpc.Server, hs *http.Server) *ServerCommand {
	return &ServerCommand{
		Use:                "server",
		Short:              "begin service",
		Long:               `begin service`,
		FParseErrWhitelist: cobra.FParseErrWhitelist{UnknownFlags: true},
		RunE: func(cmd *cobra.Command, args []string) error {
			app := kratos.New(
				kratos.Name(Name),
				kratos.Version(Version),
				kratos.Metadata(map[string]string{}),
				kratos.Logger(logger),
				kratos.Server(
					gs,
					hs,
				),
			)
			return app.Run()
		},
	}
}
